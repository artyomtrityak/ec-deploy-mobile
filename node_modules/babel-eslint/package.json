{
  "name": "babel-eslint",
  "version": "3.1.23",
  "description": "**babel-eslint** allows you to lint **ALL** valid Babel code with the fantastic [ESLint](https://github.com/eslint/eslint).",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel-eslint.git"
  },
  "dependencies": {
    "babel-core": "^5.6.4",
    "lodash.assign": "^3.0.0",
    "lodash.pick": "^3.1.0"
  },
  "scripts": {
    "bootstrap": "git submodule update --init && cd eslint && npm install",
    "eslint": "cd eslint && mocha -c tests/lib/rules/**/*.js -r ../eslint-tester.js",
    "test": "mocha"
  },
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/babel/babel-eslint/issues"
  },
  "homepage": "https://github.com/babel/babel-eslint",
  "devDependencies": {
    "eslint": "^0.24.0",
    "espree": "^2.0.3",
    "mocha": "^2.2.5"
  },
  "readme": "# babel-eslint [![Build Status][travis-image]][travis-url]\n\n**babel-eslint** allows you to lint **ALL** valid Babel code with the fantastic\n[ESLint](https://github.com/eslint/eslint).\n\n**NOTE:** Please note that this is experimental and may have numerous bugs. It is however\nsuccessfuly linting the [babel core](https://github.com/babel/babel/blob/master/.eslintrc).\n\nIf there is an issue, first check if it can be reproduced with the regular parser and with the latest versions of `eslint` and `babel-eslint`.\n\nFor questions and support please visit the `#linting` [babel slack channel](https://babel-slack.herokuapp.com)!\n\n## Known Issues\n- `no-undef` for global flow types: `ReactElement`, `ReactClass` [#130](https://github.com/babel/babel-eslint/issues/130#issuecomment-111215076)\n  - Workaround: define types as globals in `.eslintrc` or define types and import them `import type ReactElement from './types'` \n- `no-unused-vars/no-undef` with Flow declarations (`declare module A {}`) [#132](https://github.com/babel/babel-eslint/issues/132#issuecomment-112815926)\n- `no-unused-vars: [2, {vars: local}]` [#136](https://github.com/babel/babel-eslint/issues/136)\n\nPlease check out [eslint-plugin-react](https://github.com/yannickcr/eslint-plugin-react) for react/jsx issues\n- `no-unused-vars` with jsx\n\nPlease check out [eslint-plugin-babel](https://github.com/babel/eslint-plugin-babel) for the issues below: \n- `generator-star` with async/await functions [#78](https://github.com/babel/babel-eslint/issues/78)\n- `object-shorthand` with spread operator [#131](https://github.com/babel/babel-eslint/issues/131)\n\n## How does it work?\n\nESLint allows custom parsers. This is great but some of the syntax nodes that Babel supports\naren't supported by ESLint. When using this plugin, ESLint is monkeypatched and your code is\ntransformed into code that ESLint can understand. All location info such as line numbers,\ncolumns is also retained so you can track down errors with ease.\n\n## Usage\n\n### Install\n\n```sh\n$ npm install -g eslint babel-eslint\n```\n\n### Setup\n\n**.eslintrc**\n\n```json\n{\n  \"parser\": \"babel-eslint\",\n  \"rules\": {\n    \"strict\": 0\n  }\n}\n```\n\nCheck out the [ESLint docs](http://eslint.org/docs/rules/) for all possible rules.\n\n### Run\n\n```sh\n$ eslint your-files-here\n```\n\n[travis-url]: https://travis-ci.org/babel/babel-eslint\n[travis-image]: https://travis-ci.org/babel/babel-eslint.svg?branch=master\n",
  "readmeFilename": "README.md",
  "_id": "babel-eslint@3.1.23",
  "_shasum": "c755e5c16404c764ce6a4fd4574a0cd6ac4e5f7e",
  "_from": "babel-eslint@^3.1.10",
  "_resolved": "https://registry.npmjs.org/babel-eslint/-/babel-eslint-3.1.23.tgz"
}
