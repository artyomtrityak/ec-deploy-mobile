{
  "name": "eslint-loader",
  "version": "0.11.2",
  "description": "eslint loader (for webpack)",
  "keywords": [
    "lint",
    "eslint",
    "loader",
    "webpack"
  ],
  "author": {
    "name": "Maxime Thirouin"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/MoOx/eslint-loader.git"
  },
  "homepage": "https://github.com/MoOx/eslint-loader",
  "bugs": {
    "url": "https://github.com/MoOx/eslint-loader/issues"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "peerDependencies": {
    "eslint": "0.17 - 0.21"
  },
  "dependencies": {
    "loader-utils": "^0.2.7",
    "object-assign": "^2.0.0"
  },
  "devDependencies": {
    "eslint": "^0.19.0",
    "eslint-friendly-formatter": "^1.0.3",
    "tape": "^4.0.0",
    "webpack": "^1.8.4"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "npm run lint && tape test/*.js"
  },
  "readme": "# eslint-loader [![Build Status](http://img.shields.io/travis/MoOx/eslint-loader.svg)](https://travis-ci.org/MoOx/eslint-loader)\n\n> eslint loader for webpack\n\n## Install\n\n```console\n$ npm install eslint-loader\n```\n\n## Usage\n\nIn your webpack configuration\n\n```javascript\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n  }\n  // ...\n}\n```\n\nWhen using with transpiling loaders (like `babel-loader`), make sure they are in correct order\n(bottom to top). Otherwise files will be check after being processed by `babel-loader`\n\n```javascript\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {test: /\\.js$/, loader: \"babel-loader\", exclude: /node_modules/}\n      {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n  }\n  // ...\n}\n```\n\nTo be safe, you can use `preLoaders` section to check source files, not modified\nby other loaders (like `babel-loader`)\n\n```js\nmodule.exports = {\n  // ...\n  module: {\n    preLoaders: [\n      {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n  }\n  // ...\n}\n```\n\n### Options\n\nYou can pass directly some [eslint options](http://eslint.org/docs/user-guide/command-line-interface) by\n\n- Adding a query string to the loader for this loader usabe only\n\n```js\n{\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        loader: \"eslint-loader?{rules:[{semi:0}]}\",\n        exclude: /node_modules/,\n      },\n    ],\n  },\n}\n```\n\n- Adding an `eslint` entry in you webpack config for global options:\n\n```js\nmodule.exports = {\n  eslint: {\n    configFile: 'path/.eslintrc'\n  }\n}\n```\n\n**Note that you can use both method in order to benefit from global & specific options**\n\n#### `formatter` (default: eslint stylish formatter)\n\nLoader accepts a function that will have one argument: an array of eslint messages (object).\nThe function must return the output as a string.\nYou can use official eslint formatters.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  }\n  eslint: {\n    // several examples !\n\n    // default value\n    formatter: require(\"eslint/lib/formatters/stylish\"),\n\n    // community formatter\n    formatter: require(\"eslint-friendly-formatter\"),\n\n    // custom formatter\n    formatter: function(results) {\n      // `results` format is available here\n      // http://eslint.org/docs/developer-guide/nodejs-api.html#executeonfiles()\n      \n      // you should return a string\n      // DO NOT USE console.*() directly !\n      return \"OUTPUT\"\n    }\n  }\n}\n```\n\n#### Errors and Warning\n\n**By default the loader will auto adjust error reporting depending\non eslint errors/warnings counts.**\nYou can still force this behavior by using `emitError` **or** `emitWarning` options:\n\n##### `emitError` (default: `false`)\n\nLoader will always return errors if this option is set to `true`.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  }\n  eslint: {\n    emitError: true\n  }\n}\n```\n\n##### `emitWarning` (default: `false`)\n\nLoader will always return warnings if option is set to `true`.\n\n#### `quiet` (default: `false`)\n\nLoader will process and report errors only and ignore warnings if this option is set to true\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  }\n  eslint: {\n    quiet: true\n  }\n}\n```\n\n##### `failOnWarning` (default: `false`)\n\nLoader will cause the module build to fail if there are any eslint warnings.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  }\n  eslint: {\n    failOnWarning: true\n  }\n}\n```\n\n##### `failOnError` (default: `false`)\n\nLoader will cause the module build to fail if there are any eslint errors.\n\n```js\nmodule.exports = {\n  entry: \"...\",\n  module: {\n    // ...\n  }\n  eslint: {\n    failOnError: true\n  }\n}\n```\n\n## Gotchas\n\n### NoErrorsPlugin\n\n`NoErrorsPlugin` prevents Webpack from outputting anything into a bundle. So even ESLint warnings\nwill fail the build. No matter what error settings are used for `eslint-loader`.\n\nSo if you want to see ESLint warnings in console during development using `WebpackDevServer`\nremove `NoErrorsPlugin` from webpack config.\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "eslint-loader@0.11.2",
  "_shasum": "f3256c8dd10d53ed866fa937c0fdcfa1ef66f67d",
  "_from": "eslint-loader@^0.11.2",
  "_resolved": "https://registry.npmjs.org/eslint-loader/-/eslint-loader-0.11.2.tgz"
}
