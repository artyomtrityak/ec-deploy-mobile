{
  "name": "core-js",
  "description": "Standard library",
  "version": "0.9.18",
  "repository": {
    "type": "git",
    "url": "https://github.com/zloirock/core-js.git"
  },
  "main": "index.js",
  "devDependencies": {
    "webpack": "1.9.x",
    "LiveScript": "1.3.x",
    "grunt": "0.4.x",
    "grunt-cli": "0.1.x",
    "grunt-livescript": "0.5.x",
    "grunt-contrib-uglify": "0.9.x",
    "grunt-contrib-watch": "0.6.x",
    "grunt-contrib-clean": "0.6.x",
    "grunt-contrib-copy": "0.8.x",
    "grunt-karma": "0.11.x",
    "karma": "0.12.x",
    "karma-qunit": "0.1.x",
    "karma-chrome-launcher": "0.1.x",
    "karma-ie-launcher": "0.2.x",
    "karma-firefox-launcher": "0.1.x",
    "karma-opera-launcher": "0.1.x",
    "karma-phantomjs-launcher": "0.2.x",
    "promises-aplus-tests": "2.1.x",
    "eslint": "0.23.x"
  },
  "scripts": {
    "grunt": "grunt",
    "lint": "eslint es5 es6 es7 js web core fn modules",
    "promises-tests": "promises-aplus-tests tests/promises_tests_adapter",
    "test": "npm run lint && npm run grunt client livescript karma:continuous && npm run promises-tests && lsc tests/commonjs"
  },
  "license": "MIT",
  "keywords": [
    "ES5",
    "ECMAScript 5",
    "ES6",
    "ECMAScript 6",
    "ES7",
    "ECMAScript 7",
    "Harmony",
    "Strawman",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "Dict",
    "Promise",
    "Symbol",
    "Array generics",
    "setImmediate",
    "partial application",
    "Date formatting"
  ],
  "readme": "# core-js<sup>[![version](http://vb.teelaun.ch/zloirock/core-js.svg)](https://www.npmjs.org/package/core-js/)</sup>\n\n[![NPM](https://nodei.co/npm/core-js.png?downloads=true)](https://www.npmjs.org/package/core-js/)\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/zloirock/core-js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Build Status](https://travis-ci.org/zloirock/core-js.png)](https://travis-ci.org/zloirock/core-js) [![Dependency Status](https://david-dm.org/zloirock/core-js.svg)](https://david-dm.org/zloirock/core-js) [![devDependency Status](https://david-dm.org/zloirock/core-js/dev-status.svg)](https://david-dm.org/zloirock/core-js#info=devDependencies)\n\nModular compact standard library for JavaScript. Includes polyfills for [ECMAScript 5](#ecmascript-5), [ECMAScript 6](#ecmascript-6): [symbols](#ecmascript-6-symbols), [collections](#ecmascript-6-collections), [iterators](#ecmascript-6-iterators), [promises](#ecmascript-6-promises), [ECMAScript 7 proposals](#ecmascript-7); [setImmediate](#setimmediate), [array generics](#mozilla-javascript-array-generics). Some additional features such as [dictionaries](#dict), [extended partial application](#partial-application), [console cap](#console), [date formatting](#date-formatting). You can require only standardized features polyfills, use features without global namespace pollution or create a custom build.\n\n[Example](http://goo.gl/mfHYm2):\n```javascript\nArray.from(new Set([1, 2, 3, 2, 1])); // => [1, 2, 3]\n'*'.repeat(10);                       // => '**********'\nPromise.resolve(32).then(log);        // => 32\nsetImmediate(log, 42);                // => 42\n```\n\n[Without global namespace pollution](http://goo.gl/WBhs43):\n```javascript\nvar core = require('core-js/library'); // With a modular system, otherwise use global `core`\ncore.Array.from(new core.Set([1, 2, 3, 2, 1])); // => [1, 2, 3]\ncore.String.repeat('*', 10);                    // => '**********'\ncore.Promise.resolve(32).then(core.log);        // => 32\ncore.setImmediate(core.log, 42);                // => 42\n```\n\n- [Usage](#usage)\n  - [Basic](#basic)\n  - [CommonJS](#commonjs)\n  - [Custom build](#custom-build)\n- [API](#api)\n  - [ECMAScript 5](#ecmascript-5)\n  - [ECMAScript 6](#ecmascript-6)\n  - [ECMAScript 6: Symbols](#ecmascript-6-symbols)\n  - [ECMAScript 6: Collections](#ecmascript-6-collections)\n  - [ECMAScript 6: Iterators](#ecmascript-6-iterators)\n  - [ECMAScript 6: Promises](#ecmascript-6-promises)\n  - [ECMAScript 6: Reflect](#ecmascript-6-reflect)\n  - [ECMAScript 7](#ecmascript-7)\n  - [Mozilla JavaScript: Array generics](#mozilla-javascript-array-generics)\n  - [setTimeout / setInterval](#settimeout--setinterval)\n  - [setImmediate](#setimmediate)\n  - [console](#console)\n  - [Object](#object)\n  - [Dict](#dict)\n  - [Partial application](#partial-application)\n  - [Date formatting](#date-formatting)\n  - [Array](#array)\n  - [Number](#number)\n  - [Escaping characters](#escaping-characters)\n  - [delay](#delay)\n- [Changelog](#changelog)\n\n## Usage\n### Basic\n```\nnpm i core-js\nbower install core.js\n```\n\n```javascript\n// Default\nrequire('core-js');\n// Without global namespace pollution\nvar core = require('core-js/library');\n// Shim only\nrequire('core-js/shim');\n```\nIf you need complete build for browser, use builds from `core-js/client` path:  [default](https://raw.githack.com/zloirock/core-js/master/client/core.min.js), [without global namespace pollution](https://raw.githack.com/zloirock/core-js/master/client/library.min.js), [shim only](https://raw.githack.com/zloirock/core-js/master/client/shim.min.js).\n\nCaveat: if you uses `core-js` with extension of native objects, require all needed `core-js` modules at the beginning of entry point of your application, otherwise possible conflicts.\n### CommonJS\nYou can require only needed modules.\n\n```js\nrequire('core-js/es5'); // if you need support IE8-\nrequire('core-js/fn/set');\nrequire('core-js/fn/array/from');\nArray.from(new Set([1, 2, 3, 2, 1])); // => [1, 2, 3]\n\n// or, w/o global namespace pollution:\n\nvar core = require('core-js/library/es5'); // if you need support IE8-\nvar Set  = require('core-js/library/fn/set');\nvar from = require('core-js/library/fn/array/from');\nfrom(new Set([1, 2, 3, 2, 1])); // => [1, 2, 3]\n```\nAvailable entry points for methods / constructors, as above, excluding features from [`es5`](#ecmascript-5) module (this module requires fully in ES3 environment before all other modules).\n\nAvailable namespaces: for example, `core-js/es6/array` (`core-js/library/es6/array`) contains all [ES6 `Array` features](#ecmascript-6-array), `core-js/es6` (`core-js/library/es6`) contains all ES6 features.\n\nAvailable (but not recommended - possible changing modules structure in future versions) inclusion by module name, for example, `es6.object.statics-accept-primitives` - `core-js/modules/es6.object.statics-accept-primitives` or `core-js/library/modules/es6.object.statics-accept-primitives`.\n### Custom build\n```\nnpm i core-js && cd node_modules/core-js && npm i\nnpm run grunt build:core.dict,es6 -- --blacklist=es6.promise,es6.math --library=on --path=custom uglify\n```\nWhere `core.dict` and `es6` are modules (namespaces) names, which will be added to the build, `es6.promise` and `es6.math` are modules (namespaces) names, which will be excluded from the build, `--library=on` is flag for build without global namespace pollution and `custom` is target file name.\n\nAvailable namespaces: for example, `es6.array` contains [ES6 `Array` features](#ecmascript-6-array), `es6` contains all modules whose names start with `es6`.\n\nAvailable custom build from js code (required `webpack`):\n```js\nrequire('core-js/build')({\n  modules: ['es6', 'core.dict'], // modules / namespaces\n  blacklist: ['es6.reflect'],    // blacklist of modules / namespaces\n  library: false,                // flag for build without global namespace pollution\n}, function(err, code){          // callback\n  // ...\n});\n```\n## API:\n### ECMAScript 5\nModule `es5`, nothing new - without examples.\n```javascript\nObject\n  .create(proto | null, descriptors?) -> object\n  .getPrototypeOf(object) -> proto | null\n  .defineProperty(target, key, desc) -> target, cap for ie8-\n  .defineProperties(target, descriptors) -> target, cap for ie8-\n  .getOwnPropertyDescriptor(object, key) -> desc\n  .getOwnPropertyNames(object) -> array\n  .seal(object) -> object, cap for ie8-\n  .freeze(object) -> object, cap for ie8-\n  .preventExtensions(object) -> object, cap for ie8-\n  .isSealed(object) -> bool, cap for ie8-\n  .isFrozen(object) -> bool, cap for ie8-\n  .isExtensible(object) -> bool, cap for ie8-\n  .keys(object) -> array\nArray\n  .isArray(var) -> bool\n  #slice(start?, end?) -> array, fix for ie7-\n  #join(string = ',') -> string, fix for ie7-\n  #indexOf(var, from?) -> int\n  #lastIndexOf(var, from?) -> int\n  #every(fn(val, index, @), that) -> bool\n  #some(fn(val, index, @), that) -> bool\n  #forEach(fn(val, index, @), that) -> void\n  #map(fn(val, index, @), that) -> array\n  #filter(fn(val, index, @), that) -> array\n  #reduce(fn(memo, val, index, @), memo?) -> var\n  #reduceRight(fn(memo, val, index, @), memo?) -> var\nFunction\n  #bind(object, ...args) -> boundFn(...args)\nString\n  #trim() -> str\nDate\n  .now() -> int\n  #toISOString() -> string\n```\n\n### ECMAScript 6\n#### ECMAScript 6: Object & Function\nModules `es6.object.assign`, `es6.object.is`, `es6.object.set-prototype-of`, `es6.object.to-string`, `es6.function.name` and `es6.function.has-instance`.\n```javascript\nObject\n  .assign(target, ...src) -> target\n  .is(a, b) -> bool\n  .setPrototypeOf(target, proto | null) -> target, sham (required __proto__)\n  #toString() -> string, ES6 fix: @@toStringTag support\nFunction\n  #name -> string (IE9+)\n  #@@hasInstance(var) -> bool\n```\n[Example](http://goo.gl/UN5ZDT):\n```javascript\nvar foo = {q: 1, w: 2}\n  , bar = {e: 3, r: 4}\n  , baz = {t: 5, y: 6};\nObject.assign(foo, bar, baz); // => foo = {q: 1, w: 2, e: 3, r: 4, t: 5, y: 6}\n\nObject.is(NaN, NaN); // => true\nObject.is(0, -0);    // => false\nObject.is(42, 42);   // => true\nObject.is(42, '42'); // => false\n\nfunction Parent(){}\nfunction Child(){}\nObject.setPrototypeOf(Child.prototype, Parent.prototype);\nnew Child instanceof Child;  // => true\nnew Child instanceof Parent; // => true\n\nvar O = {};\nO[Symbol.toStringTag] = 'Foo';\n'' + O; // => '[object Foo]'\n\n(function foo(){}).name // => 'foo'\n```\nModule `es6.object.statics-accept-primitives`. In ES6 most `Object` static methods should work with primitives. [Example](http://goo.gl/35lPSi):\n```javascript\nObject.keys('qwe'); // => ['0', '1', '2']\nObject.getPrototypeOf('qwe') === String.prototype; // => true\n```\n#### ECMAScript 6: Array\nModules `es6.array.from`, `es6.array.of`, `es6.array.copy-within`, `es6.array.fill`, `es6.array.find` and `es6.array.find-index`.\n```javascript\nArray\n  .from(iterable | array-like, mapFn(val, index)?, that) -> array\n  .of(...args) -> array\n  #copyWithin(target = 0, start = 0, end = @length) -> @\n  #fill(val, start = 0, end = @length) -> @\n  #find(fn(val, index, @), that) -> val\n  #findIndex(fn(val, index, @), that) -> index\n  #@@unscopables -> object (cap)\n```\n[Example](http://goo.gl/nxmJTe):\n```javascript\nArray.from(new Set([1, 2, 3, 2, 1]));      // => [1, 2, 3]\nArray.from({0: 1, 1: 2, 2: 3, length: 3}); // => [1, 2, 3]\nArray.from('123', Number);                 // => [1, 2, 3]\nArray.from('123', function(it){\n  return it * it;\n});                                        // => [1, 4, 9]\n\nArray.of(1);       // => [1]\nArray.of(1, 2, 3); // => [1, 2, 3]\n\nfunction isOdd(val){\n  return val % 2;\n}\n[4, 8, 15, 16, 23, 42].find(isOdd);      // => 15\n[4, 8, 15, 16, 23, 42].findIndex(isOdd); // => 2\n[4, 8, 15, 16, 23, 42].find(isNaN);      // => undefined\n[4, 8, 15, 16, 23, 42].findIndex(isNaN); // => -1\n\nArray(5).fill(42); // => [42, 42, 42, 42, 42]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3); // => [4, 5, 3, 4, 5]\n```\n#### ECMAScript 6: String & RegExp\nModules `es6.string.from-code-point`, `es6.string.raw`, `es6.string.code-point-at`, `es6.string.ends-with`, `es6.string.includes`, `es6.string.repeat`, `es6.string.starts-with` and `es6.regexp`.\n```javascript\nString\n  .fromCodePoint(...codePoints) -> str\n  .raw({raw}, ...substitutions) -> str\n  #includes(str, from?) -> bool\n  #startsWith(str, from?) -> bool\n  #endsWith(str, from?) -> bool\n  #repeat(num) -> str\n  #codePointAt(pos) -> uint\n[new] RegExp(pattern, flags?) -> regexp, ES6 fix: can alter flags (IE9+)\n  #flags -> str (IE9+)\n```\n[Example](http://goo.gl/sdNGeJ):\n```javascript\n'foobarbaz'.includes('bar');      // => true\n'foobarbaz'.includes('bar', 4);   // => false\n'foobarbaz'.startsWith('foo');    // => true\n'foobarbaz'.startsWith('bar', 3); // => true\n'foobarbaz'.endsWith('baz');      // => true\n'foobarbaz'.endsWith('bar', 6);   // => true\n\n'string'.repeat(3); // => 'stringstringstring'\n\n'𠮷'.codePointAt(0); // => 134071\nString.fromCodePoint(97, 134071, 98); // => 'a𠮷b'\n\nvar name = 'Bob';\nString.raw`Hi\\n${name}!`;           // => 'Hi\\\\nBob!' (ES6 template string syntax)\nString.raw({raw: 'test'}, 0, 1, 2); // => 't0e1s2t'\n\nRegExp(/./g, 'm'); // => /./m\n\n/foo/.flags;    // => ''\n/foo/gim.flags; // => 'gim'\n```\n#### ECMAScript 6: Number & Math\nModule `es6.number.constructor`. `Number` constructor support binary and octal literals, [example](http://goo.gl/jRd6b3):\n```javascript\nNumber('0b1010101'); // => 85\nNumber('0o7654321'); // => 2054353\n```\nModules `es6.number.statics` and `es6.math`.\n```javascript\nNumber\n  .EPSILON -> num\n  .isFinite(num) -> bool\n  .isInteger(num) -> bool\n  .isNaN(num) -> bool\n  .isSafeInteger(num) -> bool\n  .MAX_SAFE_INTEGER -> int\n  .MIN_SAFE_INTEGER -> int\n  .parseFloat(str) -> num\n  .parseInt(str) -> int\nMath\n  .acosh(num) -> num\n  .asinh(num) -> num\n  .atanh(num) -> num\n  .cbrt(num) -> num\n  .clz32(num) -> uint\n  .cosh(num) -> num\n  .expm1(num) -> num\n  .fround(num) -> num\n  .hypot(...args) -> num\n  .imul(num, num) -> int\n  .log1p(num) -> num\n  .log10(num) -> num\n  .log2(num) -> num\n  .sign(num) -> 1 | -1 | 0 | -0 | NaN\n  .sinh(num) -> num\n  .tanh(num) -> num\n  .trunc(num) -> num\n```\n\n### ECMAScript 6: Symbols\nModule `es6.symbol`.\n```javascript\nSymbol(description?) -> symbol\n  .hasInstance -> @@hasInstance\n  .isConcatSpreadable -> @@isConcatSpreadable\n  .iterator -> @@iterator\n  .match -> @@match\n  .replace -> @@replace\n  .search -> @@search\n  .species -> @@species\n  .split -> @@split\n  .toPrimitive -> @@toPrimitive\n  .toStringTag -> @@toStringTag\n  .unscopables -> @@unscopables\n  .for(key) -> symbol\n  .keyFor(symbol) -> key\n  .useSimple() -> void\n  .useSetter() -> void\nObject\n  .getOwnPropertySymbols(object) -> array\n```\nAlso wrapped some `Object` methods for correct work with `Symbol` polyfill.\n\n[Basic example](http://goo.gl/BbvWFc):\n```javascript\nvar Person = (function(){\n  var NAME = Symbol('name');\n  function Person(name){\n    this[NAME] = name;\n  }\n  Person.prototype.getName = function(){\n    return this[NAME];\n  };\n  return Person;\n})();\n\nvar person = new Person('Vasya');\nlog(person.getName());          // => 'Vasya'\nlog(person['name']);            // => undefined\nlog(person[Symbol('name')]);    // => undefined, symbols are uniq\nfor(var key in person)log(key); // => only 'getName', symbols are not enumerable\n```\n`Symbol.for` & `Symbol.keyFor` [example](http://goo.gl/0pdJjX):\n```javascript\nvar symbol = Symbol.for('key');\nsymbol === Symbol.for('key'); // true\nSymbol.keyFor(symbol);        // 'key'\n```\n[Example](http://goo.gl/mKVOQJ) with methods for getting own object keys:\n```javascript\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\nObject.keys(O);                  // => ['a']\nObject.getOwnPropertyNames(O);   // => ['a', 'b']\nObject.getOwnPropertySymbols(O); // => [Symbol(c)]\nReflect.ownKeys(O);              // => ['a', 'b', Symbol(c)]\n```\n#### Caveats when using `Symbol` polyfill:\n\n* We can't add new primitive type, `Symbol` returns object.\n* By default, to hide the keys, `Symbol` polyfill defines setter in `Object.prototype`. For this reason, the `in` operator is not working correctly with `Symbol` polyfill: `Symbol() in {} // => true`.\n\nYou can disable defining setter in `Object.prototype`. [Example](http://goo.gl/N5UD7J):\n```javascript\nSymbol.useSimple();\nvar s1 = Symbol('s1')\n  , o1 = {};\no1[s1] = true;\nfor(var key in o1)log(key); // => 'Symbol(s1)_t.qamkg9f3q', w/o native Symbol\n\nSymbol.useSetter();\nvar s2 = Symbol('s2')\n  , o2 = {};\no2[s2] = true;\nfor(var key in o2)log(key); // nothing\n```\n### ECMAScript 6: Collections\n`core-js` uses native collections in most case, just fixes methods / constructor, if it's required, and in old environment uses fast polyfill (O(1) lookup).\n#### Map\nModule `es6.map`. About iterators from this module [here](#ecmascript-6-iterators).\n```javascript\nnew Map(iterable (entries) ?) -> map\n  #clear() -> void\n  #delete(key) -> bool\n  #forEach(fn(val, key, @), that) -> void\n  #get(key) -> val\n  #has(key) -> bool\n  #set(key, val) -> @\n  #size -> uint\n```\n[Example](http://goo.gl/RDbROF):\n```javascript\nvar a = [1];\n\nvar map = new Map([['a', 1], [42, 2]]);\nmap.set(a, 3).set(true, 4);\n\nlog(map.size);        // => 4\nlog(map.has(a));      // => true\nlog(map.has([1]));    // => false\nlog(map.get(a));      // => 3\nmap.forEach(function(val, key){\n  log(val);           // => 1, 2, 3, 4\n  log(key);           // => 'a', 42, [1], true\n});\nmap.delete(a);\nlog(map.size);        // => 3\nlog(map.get(a));      // => undefined\nlog(Array.from(map)); // => [['a', 1], [42, 2], [true, 4]]\n```\n#### Set\nModule `es6.set`. About iterators from this module [here](#ecmascript-6-iterators).\n```javascript\nnew Set(iterable?) -> set\n  #add(key) -> @\n  #clear() -> void\n  #delete(key) -> bool\n  #forEach(fn(el, el, @), that) -> void\n  #has(key) -> bool\n  #size -> uint\n```\n[Example](http://goo.gl/7XYya3):\n```javascript\nvar set = new Set(['a', 'b', 'a', 'c']);\nset.add('d').add('b').add('e');\nlog(set.size);        // => 5\nlog(set.has('b'));    // => true\nset.forEach(function(it){\n  log(it);            // => 'a', 'b', 'c', 'd', 'e'\n});\nset.delete('b');\nlog(set.size);        // => 4\nlog(set.has('b'));    // => false\nlog(Array.from(set)); // => ['a', 'c', 'd', 'e']\n```\n#### WeakMap\nModule `es6.weak-map`.\n```javascript\nnew WeakMap(iterable (entries) ?) -> weakmap\n  #delete(key) -> bool\n  #get(key) -> val\n  #has(key) -> bool\n  #set(key, val) -> @\n```\n[Example](http://goo.gl/SILXyw):\n```javascript\nvar a = [1]\n  , b = [2]\n  , c = [3];\n\nvar wmap = new WeakMap([[a, 1], [b, 2]]);\nwmap.set(c, 3).set(b, 4);\nlog(wmap.has(a));   // => true\nlog(wmap.has([1])); // => false\nlog(wmap.get(a));   // => 1\nwmap.delete(a);\nlog(wmap.get(a));   // => undefined\n\n// Private properties store:\nvar Person = (function(){\n  var names = new WeakMap;\n  function Person(name){\n    names.set(this, name);\n  }\n  Person.prototype.getName = function(){\n    return names.get(this);\n  };\n  return Person;\n})();\n\nvar person = new Person('Vasya');\nlog(person.getName());          // => 'Vasya'\nfor(var key in person)log(key); // => only 'getName'\n```\n#### WeakSet\nModule `es6.weak-set`.\n```javascript\nnew WeakSet(iterable?) -> weakset\n  #add(key) -> @\n  #delete(key) -> bool\n  #has(key) -> bool\n```\n[Example](http://goo.gl/TdFbEx):\n```javascript\nvar a = [1]\n  , b = [2]\n  , c = [3];\n\nvar wset = new WeakSet([a, b, a]);\nwset.add(c).add(b).add(c);\nlog(wset.has(b));   // => true\nlog(wset.has([2])); // => false\nwset.delete(b);\nlog(wset.has(b));   // => false\n```\n#### Caveats when using collections polyfill:\n\n* Frozen objects as collection keys are supported, but not recomended - it's slow (O(n) instead of O(1)) and, for weak-collections, leak.\n* Weak-collections polyfill stores values as hidden properties of keys. It works correct and not leak in most cases. However, it is desirable to store a collection longer than its keys.\n\n### ECMAScript 6: Iterators\nModules `es6.string.iterator` and `es6.array.iterator`:\n```javascript\nString\n  #@@iterator() -> iterator\nArray\n  #values() -> iterator\n  #keys() -> iterator\n  #entries() -> iterator (entries)\n  #@@iterator() -> iterator\nArguments\n  #@@iterator() -> iterator (sham, available only in core-js methods)\n```\nModules `es6.map` and `es6.set`:\n```javascript\nMap\n  #values() -> iterator\n  #keys() -> iterator\n  #entries() -> iterator (entries)\n  #@@iterator() -> iterator (entries)\nSet\n  #values() -> iterator\n  #keys() -> iterator\n  #entries() -> iterator (entries)\n  #@@iterator() -> iterator\n```\nModule `web.dom.iterable`:\n```javascript\nNodeList\n  #@@iterator() -> iterator\n```\n[Example](http://goo.gl/nzHVQF):\n```javascript\nvar string = 'a𠮷b';\n\nfor(var val of string)log(val);         // => 'a', '𠮷', 'b'\n\nvar array = ['a', 'b', 'c'];\n\nfor(var val of array)log(val);          // => 'a', 'b', 'c'\nfor(var val of array.values())log(val); // => 'a', 'b', 'c'\nfor(var key of array.keys())log(key);   // => 0, 1, 2\nfor(var [key, val] of array.entries()){\n  log(key);                             // => 0, 1, 2\n  log(val);                             // => 'a', 'b', 'c'\n}\n\nvar map = new Map([['a', 1], ['b', 2], ['c', 3]]);\n\nfor(var [key, val] of map){\n  log(key);                             // => 'a', 'b', 'c'\n  log(val);                             // => 1, 2, 3\n}\nfor(var val of map.values())log(val);   // => 1, 2, 3\nfor(var key of map.keys())log(key);     // => 'a', 'b', 'c'\nfor(var [key, val] of map.entries()){\n  log(key);                             // => 'a', 'b', 'c'\n  log(val);                             // => 1, 2, 3\n}\n\nvar set = new Set([1, 2, 3, 2, 1]);\n\nfor(var val of set)log(val);            // => 1, 2, 3\nfor(var val of set.values())log(val);   // => 1, 2, 3\nfor(var key of set.keys())log(key);     // => 1, 2, 3\nfor(var [key, val] of set.entries()){\n  log(key);                             // => 1, 2, 3\n  log(val);                             // => 1, 2, 3\n}\n\nfor(var x of document.querySelectorAll('*')){\n  log(x.id);\n}\n```\nModule `core.iter-helpers` - helpers for check iterable / get iterator in `library` version or, for example, for `arguments` object:\n```javascript\ncore\n  .isIterable(var) -> bool\n  .getIterator(iterable) -> iterator\n```\n[Example](http://goo.gl/uFvXW6):\n```js\nvar list = (function(){\n  return arguments;\n})(1, 2, 3);\n\nlog(core.isIterable(list)); // true;\n\nvar iter = core.getIterator(list);\nlog(iter.next().value); // 1\nlog(iter.next().value); // 2\nlog(iter.next().value); // 3\nlog(iter.next().value); // undefined\n```\nModule `core.$for` - iterators chaining - `for-of` and array / generator comprehensions helpers for ES5- syntax.\n```javascript\n$for(iterable, entries) -> iterator ($for)\n  #of(fn(value, key?), that) -> void\n  #array(mapFn(value, key?)?, that) -> array\n  #filter(fn(value, key?), that) -> iterator ($for)\n  #map(fn(value, key?), that) -> iterator ($for)\n```\n[Examples](http://goo.gl/Jtz0oG):\n```javascript\n$for(new Set([1, 2, 3, 2, 1])).of(function(it){\n  log(it); // => 1, 2, 3\n});\n\n$for([1, 2, 3].entries(), true).of(function(key, value){\n  log(key);   // => 0, 1, 2\n  log(value); // => 1, 2, 3\n});\n\n$for('abc').of(console.log, console); // => 'a', 'b', 'c'\n\n$for([1, 2, 3, 4, 5]).of(function(it){\n  log(it); // => 1, 2, 3\n  if(it == 3)return false;\n});\n\nvar ar1 = $for([1, 2, 3]).array(function(v){\n  return v * v;\n}); // => [1, 4, 9]\n\nvar set = new Set([1, 2, 3, 2, 1]);\nvar ar1 = $for(set).filter(function(v){\n  return v % 2;\n}).array(function(v){\n  return v * v;\n}); // => [1, 9]\n\nvar iter = $for(set).filter(function(v){\n  return v % 2;\n}).map(function(v){\n  return v * v;\n});\niter.next(); // => {value: 1, done: false}\niter.next(); // => {value: 9, done: false}\niter.next(); // => {value: undefined, done: true}\n\nvar map1 = new Map([['a', 1], ['b', 2], ['c', 3]]);\nvar map2 = new Map($for(map1, true).filter(function(k, v){\n  return v % 2;\n}).map(function(k, v){\n  return [k + k, v * v];\n})); // => Map {aa: 1, cc: 9}\n```\n\n### ECMAScript 6: Promises\nModule `es6.promise`.\n```javascript\nnew Promise(executor(resolve(var), reject(var))) -> promise\n  #then(resolved(var), rejected(var)) -> promise\n  #catch(rejected(var)) -> promise\n  .resolve(var || promise) -> promise\n  .reject(var) -> promise\n  .all(iterable) -> promise\n  .race(iterable) -> promise\n```\nBasic [example](http://goo.gl/vGrtUC):\n```javascript\nfunction sleepRandom(time){\n  return new Promise(function(resolve, reject){\n    setTimeout(resolve, time * 1e3, 0 | Math.random() * 1e3);\n  });\n}\n\nlog('Run');                    // => Run\nsleepRandom(5).then(function(result){\n  log(result);                 // => 869, after 5 sec.\n  return sleepRandom(10);\n}).then(function(result){\n  log(result);                 // => 202, after 10 sec.\n}).then(function(){\n  log('immediately after');    // => immediately after\n  throw Error('Irror!');\n}).then(function(){\n  log('will not be displayed');\n}).catch(log);                 // => => Error: Irror!\n```\n`Promise.resolve` and `Promise.reject` [example](http://goo.gl/vr8TN3):\n```javascript\nPromise.resolve(42).then(log); // => 42\nPromise.reject(42).catch(log); // => 42\n\nPromise.resolve($.getJSON('/data.json')); // => ES6 promise\n```\n`Promise.all` [example](http://goo.gl/RdoDBZ):\n```javascript\nPromise.all([\n  'foo',\n  sleepRandom(5),\n  sleepRandom(15),\n  sleepRandom(10)  // after 15 sec:\n]).then(log);      // => ['foo', 956, 85, 382]\n```\n`Promise.race` [example](http://goo.gl/L8ovkJ):\n```javascript\nfunction timeLimit(promise, time){\n  return Promise.race([promise, new Promise(function(resolve, reject){\n    setTimeout(reject, time * 1e3, Error('Await > ' + time + ' sec'));\n  })]);\n}\n\ntimeLimit(sleepRandom(5), 10).then(log);   // => 853, after 5 sec.\ntimeLimit(sleepRandom(15), 10).catch(log); // Error: Await > 10 sec\n```\nECMAScript 7 [async functions](https://github.com/lukehoban/ecmascript-asyncawait) [example](http://goo.gl/wnQS4j):\n```javascript\nvar delay = time => new Promise(resolve => setTimeout(resolve, time))\n\nasync function sleepRandom(time){\n  await delay(time * 1e3);\n  return 0 | Math.random() * 1e3;\n};\nasync function sleepError(time, msg){\n  await delay(time * 1e3);\n  throw Error(msg);\n};\n\n(async () => {\n  try {\n    log('Run');                // => Run\n    log(await sleepRandom(5)); // => 936, after 5 sec.\n    var [a, b, c] = await Promise.all([\n      sleepRandom(5),\n      sleepRandom(15),\n      sleepRandom(10)\n    ]);\n    log(a, b, c);              // => 210 445 71, after 15 sec.\n    await sleepError(5, 'Irror!');\n    log('Will not be displayed');\n  } catch(e){\n    log(e);                    // => Error: 'Irror!', after 5 sec.\n  }\n})();\n```\n`core-js` `Promise` supports (but not adds to native implementations) unhandled rejection tracking. In browser you will see notify in console, in node.js / io.js you can use [`unhandledRejection`](https://gist.github.com/benjamingr/0237932cee84712951a2) event.\n\n### ECMAScript 6: Reflect\nModule `es6.reflect`.\n```javascript\nReflect\n  .apply(target, thisArgument, argumentsList) -> var\n  .construct(target, argumentsList, newTarget?) -> object\n  .defineProperty(target, propertyKey, attributes) -> bool\n  .deleteProperty(target, propertyKey) -> bool\n  .enumerate(target) -> iterator\n  .get(target, propertyKey, receiver?) -> var\n  .getOwnPropertyDescriptor(target, propertyKey) -> desc\n  .getPrototypeOf(target) -> object | null\n  .has(target, propertyKey) -> bool\n  .isExtensible(target) -> bool\n  .ownKeys(target) -> array\n  .preventExtensions(target) -> bool\n  .set(target, propertyKey, V, receiver?) -> bool\n  .setPrototypeOf(target, proto) -> bool, sham(ie11+)\n```\n[Example](http://goo.gl/gVT0cH):\n```javascript\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\nReflect.ownKeys(O); // => ['a', 'b', Symbol(c)]\n\nfunction C(a, b){\n  this.c = a + b;\n}\n\nvar instance = Reflect.construct(C, [20, 22]);\ninstance.c; // => 42\n```\n### ECMAScript 7\n* `Array#includes` [proposal](https://github.com/domenic/Array.prototype.includes) - module `es7.array.includes`\n* `String#at` [proposal](https://github.com/mathiasbynens/String.prototype.at) - module `es7.string.at`\n* `String#lpad`, `String#rpad` [proposal](http://wiki.ecmascript.org/doku.php?id=strawman:string_padding) - modules `es7.string.lpad`, `es7.string.rpad`\n* `Object.values`, `Object.entries` [tc39 discuss](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-04/apr-9.md#51-objectentries-objectvalues) - module `es7.object.to-array`\n* `Object.getOwnPropertyDescriptors` [proposal](https://gist.github.com/WebReflection/9353781) - module `es7.object.get-own-property-descriptors`\n* `RegExp.escape` [proposal](https://github.com/benjamingr/RexExp.escape) - module `es7.regexp.escape`\n* `Map#toJSON`, `Set#toJSON` [proposal](https://github.com/DavidBruant/Map-Set.prototype.toJSON) - modules `es7.map.to-json`, `es7.set.to-json`\n\n```javascript\nArray\n  #includes(var, from?) -> bool\nString\n  #at(index) -> string\n  #lpad(length, fillStr = ' ') -> string\n  #rpad(length, fillStr = ' ') -> string\nObject\n  .values(object) -> array\n  .entries(object) -> array\n  .getOwnPropertyDescriptors(object) -> object\nRegExp\n  .escape(str) -> str\nMap\n  #toJSON() -> array\nSet\n  #toJSON() -> array\n```\n[Examples](http://goo.gl/XTsVCF):\n```javascript\n[1, 2, 3].includes(2);        // => true\n[1, 2, 3].includes(4);        // => false\n[1, 2, 3].includes(2, 2);     // => false\n\n[NaN].indexOf(NaN);           // => -1\n[NaN].includes(NaN);          // => true\nArray(1).indexOf(undefined);  // => -1\nArray(1).includes(undefined); // => true\n\n'a𠮷b'.at(1);        // => '𠮷'\n'a𠮷b'.at(1).length; // => 2\n\n'hello'.lpad(10);         // => '     hello'\n'hello'.lpad(10, '1234'); // => '41234hello'\n'hello'.rpad(10);         // => 'hello     '\n'hello'.rpad(10, '1234'); // => 'hello12341'\n\nObject.values({a: 1, b: 2, c: 3});  // => [1, 2, 3]\nObject.entries({a: 1, b: 2, c: 3}); // => [['a', 1], ['b', 2], ['c', 3]]\n\n// Shallow object cloning with prototype and descriptors:\nvar copy = Object.create(Object.getPrototypeOf(O), Object.getOwnPropertyDescriptors(O));\n// Mixin:\nObject.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n\nRegExp.escape('Hello, []{}()*+?.\\\\^$|!'); // => 'Hello, \\[\\]\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|!'\n\nJSON.stringify(new Map([['a', 'b'], ['c', 'd']])); // => '[[\"a\",\"b\"],[\"c\",\"d\"]]'\nJSON.stringify(new Set([1, 2, 3, 2, 1]));          // => '[1,2,3]'\n```\n### Mozilla JavaScript: Array generics\nModule `js.array.statics`.\n```javascript\nArray\n  .{...ArrayPrototype methods}\n```\n\n```javascript\nArray.slice(arguments, 1);\n\nArray.join('abcdef', '+'); // => 'a+b+c+d+e+f'\n\nvar form = document.getElementsByClassName('form__input');\nArray.reduce(form, function(memo, it){\n  memo[it.name] = it.value;\n  return memo;\n}, {}); // => {name: 'Vasya', age: '42', sex: 'yes, please'}\n```\n### setTimeout / setInterval\nModule `web.timers`. Additional arguments fix for IE9-.\n```javascript\nsetTimeout(fn(...args), time, ...args) -> id\nsetInterval(fn(...args), time, ...args) -> id\n```\n```javascript\n// Before:\nsetTimeout(log.bind(null, 42), 1000);\n// After:\nsetTimeout(log, 1000, 42);\n```\n### setImmediate\nModule `web.immediate`. [setImmediate](https://developer.mozilla.org/en-US/docs/Web/API/Window.setImmediate) polyfill.\n```javascript\nsetImmediate(fn(...args), ...args) -> id\nclearImmediate(id) -> void\n```\n[Example](http://goo.gl/6nXGrx):\n```javascript\nsetImmediate(function(arg1, arg2){\n  log(arg1, arg2); // => Message will be displayed with minimum delay\n}, 'Message will be displayed', 'with minimum delay');\n\nclearImmediate(setImmediate(function(){\n  log('Message will not be displayed');\n}));\n```\n### Console\nModule `core.log`. Console cap for old browsers and some additional functionality. In IE, Node.js / IO.js and Firebug `console` methods not require call from `console` object, but in Chromium and V8 this throws error. For some reason, we can't replace `console` methods by their bound versions. Add `log` object with bound console methods. Some more sugar: `log` is shortcut for `log.log`, we can disable output.\n```javascript\nlog ==== log.log\n  .{...console API}\n  .enable() -> void\n  .disable() -> void\n```\n```javascript\n// Before:\nif(window.console && console.warn)console.warn(42);\n// After:\nlog.warn(42);\n\n// Before:\nsetTimeout(console.warn.bind(console, 42), 1000);\n[1, 2, 3].forEach(console.warn, console);\n// After:\nsetTimeout(log.warn, 1000, 42);\n[1, 2, 3].forEach(log.warn);\n\n// log is shortcut for log.log\nsetImmediate(log, 42); // => 42\n\nlog.disable();\nlog.warn('Console is disabled, you will not see this message.');\nlog.enable();\nlog.warn('Console is enabled again.');\n```\n### Object\nModule `core.object`.\n```javascript\nObject\n  .isObject(var) -> bool\n  .classof(var) -> string \n  .define(target, mixin) -> target\n  .make(proto | null, mixin?) -> object\n```\nObject classify [examples](http://goo.gl/YZQmGo):\n```javascript\nObject.isObject({});    // => true\nObject.isObject(isNaN); // => true\nObject.isObject(null);  // => false\n\nvar classof = Object.classof;\n\nclassof(null);                 // => 'Null'\nclassof(undefined);            // => 'Undefined'\nclassof(1);                    // => 'Number'\nclassof(true);                 // => 'Boolean'\nclassof('string');             // => 'String'\nclassof(Symbol());             // => 'Symbol'\n\nclassof(new Number(1));        // => 'Number'\nclassof(new Boolean(true));    // => 'Boolean'\nclassof(new String('string')); // => 'String'\n\nvar fn   = function(){}\n  , list = (function(){return arguments})(1, 2, 3);\n\nclassof({});                   // => 'Object'\nclassof(fn);                   // => 'Function'\nclassof([]);                   // => 'Array'\nclassof(list);                 // => 'Arguments'\nclassof(/./);                  // => 'RegExp'\nclassof(new TypeError);        // => 'Error'\n\nclassof(new Set);              // => 'Set'\nclassof(new Map);              // => 'Map'\nclassof(new WeakSet);          // => 'WeakSet'\nclassof(new WeakMap);          // => 'WeakMap'\nclassof(new Promise(fn));      // => 'Promise'\n\nclassof([].values());          // => 'Array Iterator'\nclassof(new Set().values());   // => 'Set Iterator'\nclassof(new Map().values());   // => 'Map Iterator'\n\nclassof(Math);                 // => 'Math'\nclassof(JSON);                 // => 'JSON'\n\nfunction Example(){}\nExample.prototype[Symbol.toStringTag] = 'Example';\n\nclassof(new Example);          // => 'Example'\n```\n`Object.define` and `Object.make` [examples](http://goo.gl/rtpD5Z):\n```javascript\n// Before:\nObject.defineProperty(target, 'c', {\n  enumerable: true,\n  configurable: true,\n  get: function(){\n    return this.a + this.b;\n  }\n});\n\n// After:\nObject.define(target, {\n  get c(){\n    return this.a + this.b;\n  }\n});\n\n// Shallow object cloning with prototype and descriptors:\nvar copy = Object.make(Object.getPrototypeOf(src), src);\n\n// Simple inheritance:\nfunction Vector2D(x, y){\n  this.x = x;\n  this.y = y;\n}\nObject.define(Vector2D.prototype, {\n  get xy(){\n    return Math.hypot(this.x, this.y);\n  }\n});\nfunction Vector3D(x, y, z){\n  Vector2D.apply(this, arguments);\n  this.z = z;\n}\nVector3D.prototype = Object.make(Vector2D.prototype, {\n  constructor: Vector3D,\n  get xyz(){\n    return Math.hypot(this.x, this.y, this.z);\n  }\n});\n\nvar vector = new Vector3D(9, 12, 20);\nlog(vector.xy);  // => 15\nlog(vector.xyz); // => 25\nvector.y++;\nlog(vector.xy);  // => 15.811388300841896\nlog(vector.xyz); // => 25.495097567963924\n```\n### Dict\nModule `core.dict`. Based on [TC39 discuss](https://github.com/rwaldron/tc39-notes/blob/master/es6/2012-11/nov-29.md#collection-apis-review) / [strawman](http://wiki.ecmascript.org/doku.php?id=harmony:modules_standard#dictionaries).\n```javascript\n[new] Dict(iterable (entries) | object ?) -> dict\n  .isDict(var) -> bool\n  .values(object) -> iterator\n  .keys(object) -> iterator\n  .entries(object) -> iterator (entries)\n  .has(object, key) -> bool\n  .get(object, key) -> val\n  .set(object, key, value) -> object\n  .forEach(object, fn(val, key, @), that) -> void\n  .map(object, fn(val, key, @), that) -> new @\n  .mapPairs(object, fn(val, key, @), that) -> new @\n  .filter(object, fn(val, key, @), that) -> new @\n  .some(object, fn(val, key, @), that) -> bool\n  .every(object, fn(val, key, @), that) -> bool\n  .find(object, fn(val, key, @), that) -> val\n  .findKey(object, fn(val, key, @), that) -> key\n  .keyOf(object, var) -> key\n  .includes(object, var) -> bool\n  .reduce(object, fn(memo, val, key, @), memo?) -> var\n  .turn(object, fn(memo, val, key, @), memo = new @) -> memo\n```\n`Dict` create object without prototype from iterable or simple object. [Example](http://goo.gl/pnp8Vr):\n```javascript\nvar map = new Map([['a', 1], ['b', 2], ['c', 3]]);\n\nDict();                    // => {__proto__: null}\nDict({a: 1, b: 2, c: 3});  // => {__proto__: null, a: 1, b: 2, c: 3}\nDict(map);                 // => {__proto__: null, a: 1, b: 2, c: 3}\nDict([1, 2, 3].entries()); // => {__proto__: null, 0: 1, 1: 2, 2: 3}\n\nvar dict = Dict({a: 42});\ndict instanceof Object;   // => false\ndict.a;                   // => 42\ndict.toString;            // => undefined\n'a' in dict;              // => true\n'hasOwnProperty' in dict; // => false\n\nDict.isDict({});     // => false\nDict.isDict(Dict()); // => true\n```\n`Dict.keys`, `Dict.values` and `Dict.entries` returns iterators for objects, [examples](http://goo.gl/4u8UDK):\n```javascript\nvar dict = {a: 1, b: 2, c: 3};\n\nfor(var key of Dict.keys(dict))log(key); // => 'a', 'b', 'c'\n\nfor(var val of Dict.values(dict))log(val); // => 1, 2, 3\n\nfor(var [key, val] of Dict.entries(dict)){\n  log(key); // => 'a', 'b', 'c'\n  log(val); // => 1, 2, 3\n}\n\nnew Map(Dict.entries(dict)); // => Map {a: 1, b: 2, c: 3}\n\nnew Map((for([k, v] of Dict.entries(dict))if(v % 2)[k + k, v * v])); // =>  Map {aa: 1, cc: 9}\n```\nBasic dict operations for objects with prototype [example](http://goo.gl/B28UnG):\n```js\n'q' in {q: 1};            // => true\n'toString' in {};         // => true\n\nDict.has({q: 1}, 'q');    // => true\nDict.has({}, 'toString'); // => false\n\n({q: 1})['q'];            // => 1\n({}).toString;            // => function toString(){ [native code] }\n\nDict.get({q: 1}, 'q');    // => 1\nDict.get({}, 'toString'); // => undefined\n\nvar O = {};\nO['q'] = 1;\nO['q'];         // => 1\nO['__proto__'] = {w: 2};\nO['__proto__']; // => {w: 2}\nO['w'];         // => 2\n\nvar O = {};\nDict.set(O, 'q', 1);\nO['q'];         // => 1\nDict.set(O, '__proto__', {w: 2});\nO['__proto__']; // => {w: 2}\nO['w'];         // => undefined\n```\nOther methods of `Dict` module are static equialents of `Array.prototype` methods for dictionaries, [examples](http://goo.gl/yARYXR):\n```javascript\nvar dict = {a: 1, b: 2, c: 3};\n\nDict.forEach(dict, console.log, console);\n// => 1, 'a', {a: 1, b: 2, c: 3}\n// => 2, 'b', {a: 1, b: 2, c: 3}\n// => 3, 'c', {a: 1, b: 2, c: 3}\n\nDict.map(dict, function(it){\n  return it * it;\n}); // => {a: 1, b: 4, c: 9}\n\nDict.mapPairs(dict, function(val, key){\n  if(key != 'b')return [key + key, val * val];\n}); // => {aa: 1, cc: 9}\n\nDict.filter(dict, function(it){\n  return it % 2;\n}); // => {a: 1, c: 3}\n\nDict.some(dict, function(it){\n  return it === 2;\n}); // => true\n\nDict.every(dict, function(it){\n  return it === 2;\n}); // => false\n\nDict.find(dict, function(it){\n  return it > 2;\n}); // => 3\nDict.find(dict, function(it){\n  return it > 4;\n}); // => undefined\n\nDict.findKey(dict, function(it){\n  return it > 2;\n}); // => 'c'\nDict.findKey(dict, function(it){\n  return it > 4;\n}); // => undefined\n\nDict.keyOf(dict, 2);    // => 'b'\nDict.keyOf(dict, 4);    // => undefined\n\nDict.includes(dict, 2); // => true\nDict.includes(dict, 4); // => false\n\nDict.reduce(dict, function(memo, it){\n  return memo + it;\n});     // => 6\nDict.reduce(dict, function(memo, it){\n  return memo + it;\n}, ''); // => '123'\n\nDict.turn(dict, function(memo, it, key){\n  memo[key + key] = it;\n});     // => {aa: 1, bb: 2, cc: 3}\nDict.turn(dict, function(memo, it, key){\n  it % 2 && memo.push(key + it);\n}, []); // => ['a1', 'c3']\n```\n### Partial application\nModule `core.function.part`.\n```javascript\nFunction\n  #part(...args | _) -> fn(...args)\n```\n`Function#part` partial apply function without `this` binding. Uses global variable `_` (`core._` for builds without global namespace pollution) as placeholder and not conflict with `Underscore` / `LoDash`. [Examples](http://goo.gl/p9ZJ8K):\n```javascript\nvar fn1 = log.part(1, 2);\nfn1(3, 4);    // => 1, 2, 3, 4\n\nvar fn2 = log.part(_, 2, _, 4);\nfn2(1, 3);    // => 1, 2, 3, 4\n\nvar fn3 = log.part(1, _, _, 4);\nfn3(2, 3);    // => 1, 2, 3, 4\n\nfn2(1, 3, 5); // => 1, 2, 3, 4, 5\nfn2(1);       // => 1, 2, undefined, 4\n```\n### Date formatting\nModule `core.date`. Much more simple and compact (~60 lines with `en` & `ru` locales) than [Intl](https://github.com/andyearnshaw/Intl.js) or [Moment.js](http://momentjs.com/). Use them if you need extended work with `Date`.\n```javascript\nDate\n  #format(str, key?) -> str\n  #formatUTC(str, key?) -> str\ncore\n  .addLocale(key, object) -> core\n  .locale(key?) -> key\n```\nToken | Unit | Sample\n------|----- | ------\ns  | Seconds           | 0-59\nss | Seconds, 2 digits | 00-59\nm  | Minutes           | 0-59\nmm | Minutes, 2 digits | 00-59\nh  | Hours             | 0-23\nhh | Hours, 2 digits   | 00-23\nD  | Date              | 1-31\nDD | Date, 2 digits    | 01-31\nW  | Weekday, string   | Вторник\nN  | Month             | 1-12\nNN | Month, 2 digits   | 01-12\nM  | Month, string     | Ноябрь\nMM | Of month, string  | Ноября\nY  | Year, full        | 2014\nYY | Year, 2 digits    | 14\n[Examples](http://goo.gl/nkCJ15):\n```javascript\nnew Date().format('W, MM D, YY, h:mm:ss');        // => 'Friday, November 28, 14, 18:47:05'\nnew Date().formatUTC('W, MM D, YY, h:mm:ss');     // => 'Friday, November 28, 14, 12:47:05'\n\nnew Date().format('W, D MM Y г., h:mm:ss', 'ru'); // => 'Пятница, 28 Ноября 2014 г., 18:07:25'\n\ncore.locale('ru');\nnew Date().format('W, D MM Y г., h:mm:ss');       // => 'Пятница, 28 Ноября 2014 г., 18:07:25'\n\nnew Date().format('DD.NN.YY');         // => '28.11.14'\nnew Date().format('hh:mm:ss');         // => '18:47:05'\nnew Date().format('DD.NN.Y hh:mm:ss'); // => '28.11.2014 18:47:05'\nnew Date().format('W, D MM Y года');   // => 'Пятница, 28 Ноября 2014 года'\nnew Date().format('D MM, h:mm');       // => '28 Ноября, 16:47'\nnew Date().format('M Y');              // => 'Ноябрь 2014'\n\n(typeof core != 'undefined' ? core : require('core-js/library')).addLocale('ru', {\n  weekdays: 'Воскресенье,Понедельник,Вторник,Среда,Четверг,Пятница,Суббота',\n  months: 'Январ:я|ь,Феврал:я|ь,Март:а|,Апрел:я|ь,Ма:я|й,Июн:я|ь,Июл:я|ь,Август:а|,Сентябр:я|ь,Октябр:я|ь,Ноябр:я|ь,Декабр:я|ь'\n});\n```\n### Array\nModule `core.array.turn`.\n```javascript\nArray\n  #turn(fn(memo, val, index, @), memo = []) -> memo\n```\nMethod `Array#turn` reduce array to object, [example](http://goo.gl/zZbvq7):\n```javascript\n[1, 2, 3, 4, 5].turn(function(memo, it){\n  memo['key' + it] = !!(it % 2);\n}, {}); // => {key1: true, key2: false, key3: true, key4: false, key5: true}\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9].turn(function(memo, it){\n  it % 2 && memo.push(it * it);\n  if(memo.length == 3)return false;\n}); // => [1, 9, 25]\n```\n### Number\nModules `core.number.iterator` and `core.number.math`.\n```javascript\nNumber\n  #@@iterator() -> iterator\n  #random(lim = 0) -> num\n  #{...Math} \n```\nNumber Iterator [examples](http://goo.gl/RI60Ot):\n```javascript\nfor(var i of 3)log(i); // => 0, 1, 2\n\nArray.from(10, Math.random); // => [0.9817775336559862, 0.02720663254149258, ...]\n\nArray.from(10); // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nArray.from(10, function(it){\n  return this + it * it;\n}, .42); // => [0.42, 1.42, 4.42, 9.42, 16.42, 25.42, 36.42, 49.42, 64.42, 81.42]\n\n// Comprehensions:\n[for(i of 10)if(i % 2)i * i]; // => [1, 9, 25, 49, 81]\n\nDict((for(i of 3)['key' + i, !(i % 2)])); // => {key0: true, key1: false, key2: true}\n```\n`Math` methods in `Number.prototype` [examples](http://goo.gl/06bs1k):\n```javascript\n3..pow(3);           // => 27\n(-729).abs().sqrt(); // => 27\n\n10..random(20);         // => Random number (10, 20), for example, 16.818793776910752\n10..random(20).floor(); // => Random integer [10, 19], for example, 16\n\nvar array = [1, 2, 3, 4, 5];\narray[array.length.random().floor()]; // => Random element, for example, 4\n```\n### Escaping characters\nModule `core.string.escape-html`.\n```javascript\nString\n  #escapeHTML() -> str\n  #unescapeHTML() -> str\n```\n[Examples](http://goo.gl/6bOvsQ):\n```javascript\n'<script>doSomething();</script>'.escapeHTML(); // => '&lt;script&gt;doSomething();&lt;/script&gt;'\n'&lt;script&gt;doSomething();&lt;/script&gt;'.unescapeHTML(); // => '<script>doSomething();</script>'\n```\n### delay\nModule `core.delay`. [Promise](#ecmascript-6-promises)-returning delay function, [esdiscuss](https://esdiscuss.org/topic/promise-returning-delay-function). [Example](http://goo.gl/lbucba):\n```javascript\ndelay(1e3).then(() => log('after 1 sec'));\n\n(async () => {\n  await delay(3e3);\n  log('after 3 sec');\n  \n  while(await delay(3e3))log('each 3 sec');\n})();\n```\n\n## Changelog\n##### 0.9.18 - 2015.06.17\n  * removed `/` from [`RegExp.escape`](#ecmascript-7) escaped characters\n\n##### 0.9.17 - 2015.06.14\n  * updated [`RegExp.escape`](#ecmascript-7) to the [latest proposal](https://github.com/benjamingr/RexExp.escape)\n  * fixed conflict with webpack dev server + IE buggy behavior\n\n##### 0.9.16 - 2015.06.11\n  * more correct order resolving thenable in [`Promise`](#ecmascript-6-promises) polyfill\n  * uses polyfill instead of [buggy V8 `Promise`](https://github.com/zloirock/core-js/issues/78)\n\n##### 0.9.15 - 2015.06.09\n  * [collections](#ecmascript-6-collections) from `library` version return wrapped native instances\n  * fixed collections prototype methods in `library` version\n  * optimized [`Math.hypot`](#ecmascript-6-number--math)\n\n##### 0.9.14 - 2015.06.04\n  * updated [`Promise.resolve` behavior](https://esdiscuss.org/topic/fixing-promise-resolve)\n  * added fallback for IE11 buggy `Object.getOwnPropertyNames` + iframe\n  * some other fixes\n\n##### 0.9.13 - 2015.05.25\n  * added fallback for [`Symbol` polyfill](#ecmascript-6-symbols) for old Android\n  * some other fixes\n\n##### 0.9.12 - 2015.05.24\n  * different instances `core-js` should use / recognize the same symbols\n  * some fixes\n\n##### 0.9.11 - 2015.05.18\n  * simplified [custom build](#custom-build)\n    * add custom build js api\n    * added `grunt-cli` to `devDependencies` for `npm run grunt`\n  * some fixes\n\n##### 0.9.10 - 2015.05.16\n  * wrapped `Function#toString` for correct work wrapped methods / constructors with methods similar to the [`lodash` `isNative`](https://github.com/lodash/lodash/issues/1197)\n  * added proto versions of methods to export object in `default` version for consistency with `library` version\n\n##### 0.9.9 - 2015.05.14\n  * wrapped `Object#propertyIsEnumerable` for [`Symbol` polyfill](#ecmascript-6-symbols)\n  * [added proto versions of methods to `library` for ES7 bind syntax](https://github.com/zloirock/core-js/issues/65)\n  * some other fixes\n\n##### 0.9.8 - 2015.05.12\n  * fixed [`Math.hypot`](#ecmascript-6-number--math) with negative arguments\n  * added `Object#toString.toString` as fallback for [`lodash` `isNative`](https://github.com/lodash/lodash/issues/1197)\n\n##### 0.9.7 - 2015.05.07\n  * added [support DOM collections](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#Streamlining_cross-browser_behavior) to IE8- `Array#slice`\n\n##### 0.9.6 - 2015.05.01\n  * added [`String#lpad`, `String#rpad`](#ecmascript-7)\n\n##### 0.9.5 - 2015.04.30\n  * added cap for `Function#@@hasInstance`\n  * some fixes and optimizations\n\n##### 0.9.4 - 2015.04.27\n  * fixed `RegExp` constructor\n\n##### 0.9.3 - 2015.04.26\n  * some fixes and optimizations\n\n##### 0.9.2 - 2015.04.25\n  * more correct [`Promise`](#ecmascript-6-promises) unhandled rejection tracking and resolving / rejection priority\n\n##### 0.9.1 - 2015.04.25\n  * fixed `__proto__`-based [`Promise`](#ecmascript-6-promises) subclassing in some environments\n\n##### 0.9.0 - 2015.04.24\n  * added correct [symbols](#ecmascript-6-symbols) descriptors\n    * fixed behavior `Object.{assign, create, defineProperty, defineProperties, getOwnPropertyDescriptor, getOwnPropertyDescriptors}` with symbols\n    * added [single entry points](#commonjs) for `Object.{create, defineProperty, defineProperties}`\n  * added [`Map#toJSON`](#ecmascript-7)\n  * removed non-standard methods `Object#[_]` and `Function#only` - they solves syntax problems, but now in compilers available arrows and ~~in near future will be available~~ [available](http://babeljs.io/blog/2015/05/14/function-bind/) [bind syntax](https://github.com/zenparsing/es-function-bind)\n  * removed non-standard undocumented methods `Symbol.{pure, set}`\n  * some fixes and internal changes\n\n##### 0.8.4 - 2015.04.18\n  * uses `webpack` instead of `browserify` for browser builds - more compression-friendly result\n\n##### 0.8.3 - 2015.04.14\n  * fixed `Array` statics with single entry points\n\n##### 0.8.2 - 2015.04.13\n  * [`Math.fround`](#ecmascript-6-number--math) now also works in IE9-\n  * added [`Set#toJSON`](#ecmascript-7)\n  * some optimizations and fixes\n\n##### 0.8.1 - 2015.04.03\n  * fixed `Symbol.keyFor`\n\n##### 0.8.0 - 2015.04.02\n  * changed [CommonJS API](#commonjs)\n  * splitted and renamed some modules\n  * added support ES3 environment (ES5 polyfill) to **all** default versions - size increases slightly (+ ~4kb w/o gzip), many issues disappear, if you don't need it - [simply include only required namespaces / features / modules](#commonjs)\n  * removed [abstract references](https://github.com/zenparsing/es-abstract-refs) support - proposal has been superseded =\\\n  * [`$for.isIterable` -> `core.isIterable`, `$for.getIterator` -> `core.getIterator`](#ecmascript-6-iterators), temporary available in old namespace\n  * fixed iterators support in v8 `Promise.all` and `Promise.race`\n  * many other fixes\n\n##### 0.7.2 - 2015.03.09\n  * some fixes\n\n##### 0.7.1 - 2015.03.07\n  * some fixes\n\n##### 0.7.0 - 2015.03.06\n  * rewritten and splitted into [CommonJS modules](#commonjs)\n\n##### 0.6.1 - 2015.02.24\n  * fixed support [`Object.defineProperty`](#ecmascript-5) with accessors on DOM elements on IE8\n\n##### 0.6.0 - 2015.02.23\n  * added support safe closing iteration - calling `iterator.return` on abort iteration, if it exists\n  * added basic support [`Promise`](#ecmascript-6-promises) unhandled rejection tracking in shim\n  * added [`Object.getOwnPropertyDescriptors`](#ecmascript-7)\n  * removed `console` cap - creates too many problems - you can use [`core.log`](#console) module as that\n  * restructuring [namespaces](#custom-build)\n  * some fixes\n\n##### 0.5.4 - 2015.02.15\n  * some fixes\n\n##### 0.5.3 - 2015.02.14\n  * added [support binary and octal literals](#ecmascript-6-number--math) to `Number` constructor\n  * added [`Date#toISOString`](#ecmascript-5)\n\n##### 0.5.2 - 2015.02.10\n  * some fixes\n\n##### 0.5.1 - 2015.02.09\n  * some fixes\n\n##### 0.5.0 - 2015.02.08\n  * systematization of modules\n  * splitted [`es6` module](#ecmascript-6)\n  * splitted [`console` module](#console): `web.console` - only cap for missing methods, `core.log` - bound methods & additional features\n  * added [`delay` method](#delay)\n  * some fixes\n\n##### 0.4.10 - 2015.01.28\n  * [`Object.getOwnPropertySymbols`](#ecmascript-6-symbols) polyfill returns array of wrapped keys\n\n##### 0.4.9 - 2015.01.27\n  * FF20-24 fix\n\n##### 0.4.8 - 2015.01.25\n  * some [collections](#ecmascript-6-collections) fixes\n\n##### 0.4.7 - 2015.01.25\n  * added support frozen objects as [collections](#ecmascript-6-collections) keys\n\n##### 0.4.6 - 2015.01.21\n  * added [`Object.getOwnPropertySymbols`](#ecmascript-6-symbols)\n  * added [`NodeList.prototype[@@iterator]`](#ecmascript-6-iterators)\n  * added basic `@@species` logic - getter in native constructors\n  * removed `Function#by`\n  * some fixes\n\n##### 0.4.5 - 2015.01.16\n  * some fixes\n\n##### 0.4.4 - 2015.01.11\n  * enabled CSP support\n\n##### 0.4.3 - 2015.01.10\n  * added `Function` instances `name` property for IE9+\n\n##### 0.4.2 - 2015.01.10\n  * `Object` static methods accept primitives\n  * `RegExp` constructor can alter flags (IE9+)\n  * added `Array.prototype[Symbol.unscopables]`\n\n##### 0.4.1 - 2015.01.05\n  * some fixes\n\n##### 0.4.0 - 2015.01.03\n  * added [`es6.reflect`](#ecmascript-6-reflect) module:\n    * added `Reflect.apply`\n    * added `Reflect.construct`\n    * added `Reflect.defineProperty`\n    * added `Reflect.deleteProperty`\n    * added `Reflect.enumerate`\n    * added `Reflect.get`\n    * added `Reflect.getOwnPropertyDescriptor`\n    * added `Reflect.getPrototypeOf`\n    * added `Reflect.has`\n    * added `Reflect.isExtensible`\n    * added `Reflect.preventExtensions`\n    * added `Reflect.set`\n    * added `Reflect.setPrototypeOf`\n  * `core-js` methods now can use external `Symbol.iterator` polyfill\n  * some fixes\n\n##### 0.3.3 - 2014.12.28\n  * [console cap](#console) excluded from node.js default builds\n\n##### 0.3.2 - 2014.12.25\n  * added cap for [ES5](#ecmascript-5) freeze-family methods\n  * fixed `console` bug\n\n##### 0.3.1 - 2014.12.23\n  * some fixes\n\n##### 0.3.0 - 2014.12.23\n  * Optimize [`Map` & `Set`](#ecmascript-6-collections):\n    * use entries chain on hash table\n    * fast & correct iteration\n    * iterators moved to [`es6`](#ecmascript-6) and [`es6.collections`](#ecmascript-6-collections) modules\n\n##### 0.2.5 - 2014.12.20\n  * `console` no longer shortcut for `console.log` (compatibility problems)\n  * some fixes\n\n##### 0.2.4 - 2014.12.17\n  * better compliance of ES6\n  * added [`Math.fround`](#ecmascript-6-number--math) (IE10+)\n  * some fixes\n\n##### 0.2.3 - 2014.12.15\n  * [Symbols](#ecmascript-6-symbols):\n    * added option to disable addition setter to `Object.prototype` for Symbol polyfill:\n      * added `Symbol.useSimple`\n      * added `Symbol.useSetter`\n    * added cap for well-known Symbols:\n      * added `Symbol.hasInstance`\n      * added `Symbol.isConcatSpreadable`\n      * added `Symbol.match`\n      * added `Symbol.replace`\n      * added `Symbol.search`\n      * added `Symbol.species`\n      * added `Symbol.split`\n      * added `Symbol.toPrimitive`\n      * added `Symbol.unscopables`\n\n##### 0.2.2 - 2014.12.13\n  * added [`RegExp#flags`](#ecmascript-6-string--regexp) ([December 2014 Draft Rev 29](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#december_6_2014_draft_rev_29))\n  * added [`String.raw`](#ecmascript-6-string--regexp)\n\n##### 0.2.1 - 2014.12.12\n  * repair converting -0 to +0 in [native collections](#ecmascript-6-collections)\n\n##### 0.2.0 - 2014.12.06\n  * added [`es7.proposals`](#ecmascript-7) and [`es7.abstract-refs`](https://github.com/zenparsing/es-abstract-refs) modules\n  * added [`String#at`](#ecmascript-7)\n  * added real [`String Iterator`](#ecmascript-6-iterators), older versions used Array Iterator\n  * added abstract references support:\n    * added `Symbol.referenceGet`\n    * added `Symbol.referenceSet`\n    * added `Symbol.referenceDelete`\n    * added `Function#@@referenceGet`\n    * added `Map#@@referenceGet`\n    * added `Map#@@referenceSet`\n    * added `Map#@@referenceDelete`\n    * added `WeakMap#@@referenceGet`\n    * added `WeakMap#@@referenceSet`\n    * added `WeakMap#@@referenceDelete`\n    * added `Dict.{...methods}[@@referenceGet]`\n  * removed deprecated `.contains` methods\n  * some fixes\n\n##### 0.1.5 - 2014.12.01\n  * added [`Array#copyWithin`](#ecmascript-6-array)\n  * added [`String#codePointAt`](#ecmascript-6-string--regexp)\n  * added [`String.fromCodePoint`](#ecmascript-6-string--regexp)\n\n##### 0.1.4 - 2014.11.27\n  * added [`Dict.mapPairs`](#dict)\n\n##### 0.1.3 - 2014.11.20\n  * [TC39 November meeting](https://github.com/rwaldron/tc39-notes/tree/master/es6/2014-11):\n    * [`.contains` -> `.includes`](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-18.md#51--44-arrayprototypecontains-and-stringprototypecontains)\n      * `String#contains` -> [`String#includes`](#ecmascript-6-string--regexp)\n      * `Array#contains` -> [`Array#includes`](#ecmascript-7)\n      * `Dict.contains` -> [`Dict.includes`](#dict)\n    * [removed `WeakMap#clear`](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-19.md#412-should-weakmapweakset-have-a-clear-method-markm)\n    * [removed `WeakSet#clear`](https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-19.md#412-should-weakmapweakset-have-a-clear-method-markm)\n\n##### 0.1.2 - 2014.11.19\n  * `Map` & `Set` bug fix\n\n##### 0.1.1 - 2014.11.18\n  * public release",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zloirock/core-js/issues"
  },
  "homepage": "https://github.com/zloirock/core-js",
  "_id": "core-js@0.9.18",
  "_shasum": "13f458e430232b0f4ec1f480da7c2f5288e9d095",
  "_from": "core-js@^0.9.0",
  "_resolved": "https://registry.npmjs.org/core-js/-/core-js-0.9.18.tgz"
}
