{
  "name": "react-native",
  "version": "0.7.0-rc.2",
  "description": "A framework for building native apps using React",
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "git@github.com:facebook/react-native.git"
  },
  "jest": {
    "scriptPreprocessor": "jestSupport/scriptPreprocess.js",
    "setupEnvScriptFile": "jestSupport/env.js",
    "testPathIgnorePatterns": [
      "/node_modules/",
      "packager/react-packager/src/Activity/"
    ],
    "testFileExtensions": [
      "js"
    ],
    "unmockedModulePathPatterns": [
      "promise",
      "source-map"
    ]
  },
  "main": "Libraries/react-native/react-native.js",
  "files": [
    "React",
    "React.podspec",
    "Examples/SampleApp",
    "Libraries",
    "packager",
    "cli.js",
    "local-cli",
    "init.sh",
    "LICENSE",
    "PATENTS",
    "README.md"
  ],
  "scripts": {
    "test": "jest",
    "lint": "node linter.js Examples/ Libraries/",
    "start": "./packager/packager.sh"
  },
  "bin": {
    "react-native-start": "packager/packager.sh"
  },
  "dependencies": {
    "absolute-path": "0.0.0",
    "babel": "5.4.3",
    "babel-core": "^5.6.4",
    "bluebird": "^2.9.21",
    "chalk": "^1.0.0",
    "connect": "2.8.3",
    "debug": "~2.1.0",
    "graceful-fs": "^3.0.6",
    "image-size": "0.3.5",
    "joi": "~5.1.0",
    "jstransform": "11.0.1",
    "module-deps": "3.5.6",
    "optimist": "0.6.1",
    "promise": "^7.0.3",
    "react-timer-mixin": "^0.13.1",
    "react-tools": "0.13.2",
    "rebound": "^0.0.12",
    "sane": "^1.1.2",
    "source-map": "0.1.31",
    "stacktrace-parser": "frantic/stacktrace-parser#493c5e5638",
    "uglify-js": "~2.4.16",
    "underscore": "1.7.0",
    "worker-farm": "^1.3.1",
    "ws": "0.4.31",
    "yargs": "1.3.2"
  },
  "devDependencies": {
    "jest-cli": "0.4.5",
    "babel-eslint": "3.1.5",
    "eslint": "0.21.2",
    "eslint-plugin-react": "2.3.0"
  },
  "readme": "# React Native [![Build Status](https://travis-ci.org/facebook/react-native.svg?branch=master)](https://travis-ci.org/facebook/react-native)\n\nReact Native enables you to build world-class application experiences on native platforms using a consistent developer experience based on JavaScript and\n[React](http://facebook.github.io/react). The focus of React Native is on developer efficiency across all the platforms you care about - learn once, write anywhere. Facebook uses React Native in multiple production apps and will continue investing in React Native.\n\n## Native iOS Components\n\nWith React Native, you can use the standard platform components such as `UITabBar` and `UINavigationController` on iOS.  This gives your app a consistent look and feel with the rest of the platform ecosystem, and keeps the quality bar high.  These components are easily incorporated into your app using their React component counterparts, such as _TabBarIOS_ and _NavigatorIOS_.\n\n```javascript\nvar React = require('react-native');\nvar { TabBarIOS, NavigatorIOS } = React;\n\nvar App = React.createClass({\n  render: function() {\n    return (\n      <TabBarIOS>\n        <TabBarIOS.Item title=\"React Native\" selected={true}>\n          <NavigatorIOS initialRoute={{ title: 'React Native' }} />\n        </TabBarIOS.Item>\n      </TabBarIOS>\n    );\n  },\n});\n```\n\n## Asynchronous Execution\n\nAll operations between the JavaScript application code and the native platform are performed asynchronously, and the native modules can also make use of additional threads as well.  This means we can decode images off of the main thread, save to disk in the background, measure text and compute layouts without blocking the UI, and more.  As a result, React Native apps are naturally fluid and responsive.  The communication is also fully serializable, which allows us to leverage Chrome Developer Tools to debug the JavaScript while running the complete app, either in the simulator or on a physical device.\n\n![](http://facebook.github.io/react-native/img/chrome_breakpoint.png)\n\n\n## Touch Handling\n\niOS has a very powerful system called the Responder Chain to negotiate touches in complex view hierarchies which does not have a universal analog on the web. React Native implements a similar responder system and provides high level components such as TouchableHighlight that integrate properly with scroll views and other elements without any additional configuration.\n\n```javascript\nvar React = require('react-native');\nvar { ScrollView, TouchableHighlight, Text } = React;\n\nvar TouchDemo = React.createClass({\n  render: function() {\n    return (\n      <ScrollView>\n        <TouchableHighlight onPress={() => console.log('pressed')}>\n          <Text>Proper Touch Handling</Text>\n        </TouchableHighlight>\n      </ScrollView>\n    );\n  },\n});\n```\n\n\n## Flexbox and Styling\nLaying out views should be easy, which is why we brought the flexbox layout model from the web to React Native.  Flexbox makes it simple to build the most common UI layouts, such as stacked and nested boxes with margin and padding.  React Native also supports common web styles, such as `fontWeight`, and the `StyleSheet` abstraction provides an optimized mechanism to declare all your styles and layout right along with the components that use them and apply them inline.\n\n```javascript\nvar React = require('react-native');\nvar { Image, StyleSheet, Text, View } = React;\n\nvar ReactNative = React.createClass({\n  render: function() {\n    return (\n      <View style={styles.row}>\n        <Image\n          source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}}\n          style={styles.image}\n        />\n        <View style={styles.text}>\n          <Text style={styles.title}>\n            React Native\n          </Text>\n          <Text style={styles.subtitle}>\n            Build high quality mobile apps using React\n          </Text>\n        </View>\n      </View>\n    );\n  },\n});\nvar styles = StyleSheet.create({\n  row: { flexDirection: 'row', margin: 40 },\n  image: { width: 40, height: 40, marginRight: 10 },\n  text: { flex: 1, justifyContent: 'center'},\n  title: { fontSize: 11, fontWeight: 'bold' },\n  subtitle: { fontSize: 10 },\n});\n```\n\n## Polyfills\n\nReact Native is focused on changing the way view code is written.  For the rest, we look to the web for universal standards and polyfill those APIs where appropriate. You can use npm to install JavaScript libraries that work on top of the functionality baked into React Native, such as `XMLHttpRequest`, `window.requestAnimationFrame`, and `navigator.geolocation`.  We are working on expanding the available APIs, and are excited for the Open Source community to contribute as well.\n\n```javascript\nvar React = require('react-native');\nvar { Text } = React;\n\nvar GeoInfo = React.createClass({\n  getInitialState: function() {\n    return { position: 'unknown' };\n  },\n  componentDidMount: function() {\n    navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({position}),\n      (error) => console.error(error)\n    );\n  },\n  render: function() {\n    return (\n      <Text>\n        Position: {JSON.stringify(this.state.position)}\n      </Text>\n    );\n  },\n});\n```\n\n## Extensibility\n\nIt is certainly possible to create a great app using React Native without writing a single line of native code, but React Native is also designed to be easily extended with custom native views and modules - that means you can reuse anything you've already built, and can import and use your favorite native libraries.  To create a simple module in iOS, create a new class that implements the `RCTBridgeModule` protocol, and wrap the function that you want to make available to JavaScript in `RCT_EXPORT_METHOD`. Additionally, the class itself must be explicitly exported with `RCT_EXPORT_MODULE();`.\n\n```objc\n// Objective-C\n\n#import \"RCTBridgeModule.h\"\n\n@interface MyCustomModule : NSObject <RCTBridgeModule>\n@end\n\n@implementation MyCustomModule\n\nRCT_EXPORT_MODULE();\n\n// Available as NativeModules.MyCustomModule.processString\nRCT_EXPORT_METHOD(processString:(NSString *)input callback:(RCTResponseSenderBlock)callback)\n{\n  callback(@[[input stringByReplacingOccurrencesOfString:@\"Goodbye\" withString:@\"Hello\"]]);\n}\n\n@end\n```\n\n```javascript\n// JavaScript\n\nvar React = require('react-native');\nvar { NativeModules, Text } = React;\n\nvar Message = React.createClass({\n  getInitialState() {\n    return { text: 'Goodbye World.' };\n  },\n  componentDidMount() {\n    NativeModules.MyCustomModule.processString(this.state.text, (text) => {\n      this.setState({text});\n    });\n  },\n  render: function() {\n    return (\n      <Text>{this.state.text}</Text>\n    );\n  },\n});\n```\n\nCustom iOS views can be exposed by subclassing `RCTViewManager`, implementing a `-view` method, and exporting properties with the `RCT_EXPORT_VIEW_PROPERTY` macro.  Then use `requireNativeComponent` in JavaScript to use the component in your app.\n\n```objc\n// Objective-C\n\n#import \"RCTViewManager.h\"\n\n@interface MyCustomViewManager : RCTViewManager\n@end\n\n@implementation MyCustomViewManager\n\nRCT_EXPORT_MODULE()\n\n- (UIView *)view\n{\n  return [[MyCustomView alloc] init];\n}\n\nRCT_EXPORT_VIEW_PROPERTY(myCustomProperty, NSString);\n\n@end\n```\n\n```javascript\n// JavaScript\n\nvar React = require('react-native');\nvar { requireNativeComponent } = React;\n\nclass MyCustomView extends React.Component {\n  render() {\n    return <NativeMyCustomView {...this.props} />;\n  }\n}\nMyCustomView.propTypes = {\n  myCustomProperty: React.PropTypes.oneOf(['a', 'b']),\n};\n\nvar NativeMyCustomView = requireNativeComponent('MyCustomView', MyCustomView);\nmodule.exports = MyCustomView;\n```\n\n## Running the Examples\n\n- `git clone https://github.com/facebook/react-native.git`\n- `cd react-native && npm install`\n- `cd Examples`\n\nNow open any example and hit run in Xcode.\n\nFurther documentation, tutorials, and more on the [React Native website](http://facebook.github.io/react-native/docs/getting-started.html).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/facebook/react-native/issues"
  },
  "homepage": "https://github.com/facebook/react-native",
  "_id": "react-native@0.7.0-rc.2",
  "_shasum": "3a07e201cad4a1325617efbad3b254ac5e38da86",
  "_from": "react-native@0.7.0-rc.2",
  "_resolved": "https://registry.npmjs.org/react-native/-/react-native-0.7.0-rc.2.tgz"
}
