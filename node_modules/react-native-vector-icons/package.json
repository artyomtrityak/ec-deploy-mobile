{
  "name": "react-native-vector-icons",
  "version": "0.6.3",
  "description": "Customizable Icons for React Native with support for NavBar/TabBar, image source and full styling. Choose from 2800+ bundled icons or use your own.",
  "main": "index.js",
  "bin": {
    "generate-icon": "./generate-icon.js"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "rm -rf {Fonts,Entypo.js,EvilIcons.js,FontAwesome.js,Foundation.js,Ionicons.js,MaterialIcons.js,Zocial.js} && mkdir Fonts && npm run build-entypo && npm run build-evilicons && npm run build-fontawesome && npm run build-foundation && npm run build-ionicons && npm run build-materialicons && npm run build-zocial",
    "build-entypo": "mkdir -p tmp/svg && curl https://dl.dropboxusercontent.com/u/4339492/entypo.zip > tmp/entypo.zip && unzip -j tmp/entypo.zip *.svg -x __MACOSX/* -d tmp/svg && fontcustom compile tmp/svg -o tmp -n Entypo -t css -h && node generate-icon tmp/Entypo.css --componentName=Entypo --fontFamily=Entypo > Entypo.js && cp tmp/Entypo.ttf Fonts && rm -rf {tmp,.fontcustom-manifest.json}",
    "build-evilicons": "fontcustom compile node_modules/evil-icons/assets/icons -o tmp -n EvilIcons -t css -h && node generate-icon tmp/EvilIcons.css --prefix=.icon-ei- --componentName=EvilIcons --fontFamily=EvilIcons > EvilIcons.js && cp tmp/EvilIcons.ttf Fonts && rm -rf {tmp,.fontcustom-manifest.json}",
    "build-fontawesome": "node generate-icon node_modules/font-awesome/css/font-awesome.css --prefix=.fa- --componentName=FontAwesome --fontFamily=FontAwesome > FontAwesome.js && cp node_modules/font-awesome/fonts/fontawesome-webfont.ttf Fonts/FontAwesome.ttf",
    "build-foundation": "node generate-icon bower_components/foundation-icon-fonts/foundation-icons.css --prefix=.fi- --componentName=Foundation --fontFamily=fontcustom > Foundation.js && cp bower_components/foundation-icon-fonts/foundation-icons.ttf Fonts/Foundation.ttf",
    "build-ionicons": "node generate-icon bower_components/ionicons/css/ionicons.css --prefix=.ion- --componentName=Ionicons --fontFamily=Ionicons > Ionicons.js && cp bower_components/ionicons/fonts/ionicons.ttf Fonts/Ionicons.ttf",
    "build-materialicons": "mkdir -p tmp/svg && for f in ./node_modules/material-design-icons/*/svg/production/ic_*_48px.svg; do t=${f/*\\/ic_/}; t=${t/_48px/}; cp \"$f\" \"./tmp/svg/${t//_/-}\"; done && fontcustom compile tmp/svg -o tmp -n MaterialIcons -t css -h && node generate-icon tmp/MaterialIcons.css --componentName=MaterialIcons --fontFamily=MaterialIcons > MaterialIcons.js && cp tmp/MaterialIcons.ttf Fonts && rm -rf {tmp,.fontcustom-manifest.json}",
    "build-zocial": "node generate-icon bower_components/css-social-buttons/css/zocial.css --prefix=.zocial. --componentName=Zocial --fontFamily=zocial > Zocial.js && cp bower_components/css-social-buttons/css/zocial.ttf Fonts/Zocial.ttf"
  },
  "keywords": [
    "react-native",
    "react-component",
    "react-native-component",
    "react",
    "mobile",
    "ios",
    "ui",
    "icon",
    "icons",
    "vector",
    "retina",
    "font"
  ],
  "author": {
    "name": "Joel Arvidsson",
    "email": "joel@oblador.se"
  },
  "homepage": "https://github.com/oblador/react-native-vector-icons",
  "bugs": {
    "url": "https://github.com/oblador/react-native-vector-icons/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/oblador/react-native-vector-icons.git"
  },
  "license": "MIT",
  "peerDependencies": {
    "react-native": ">=0.4.0 || 0.5.0-rc1 || 0.6.0-rc || 0.7.0-rc || 0.7.0-rc.2"
  },
  "dependencies": {
    "lodash": "^3.8.0",
    "yargs": "^3.9.0"
  },
  "devDependencies": {
    "evil-icons": "^1.7.6",
    "font-awesome": "^4.3.0",
    "material-design-icons": "^2.0"
  },
  "readme": "# Vector Icons for React Native\n\n**Choose from 2800 icons or use your own.**\n\nPerfect for buttons, logos and nav/tab bars. Easy to extend, style and integrate into your project.\n\n## Installation\n\n`$ npm install react-native-vector-icons --save`\n\nIf you want to use any of the bundled icons, you need to add the icon fonts to your XCode project. Just follow these steps:\n\n* Right click on you project in XCode and select **Add files to xxx**. \n* Browse to `node_modules/react-native-vector-icons` and select the folder `Fonts` (or just the ones you want). \n* Edit `Info.plist` and add a property called **Fonts provided by application** (if you haven't added one already) and type in the files you just added. It will look something like this:\n\n![XCode screenshot](https://cloud.githubusercontent.com/assets/378279/7667535/0e1fd13a-fc0c-11e4-9220-18d5c095a7be.png)\n\n*Note: you need to recompile your project after adding new fonts.*\n\nIf you want to use the TabBar integration, then you need to add `RNVectorIcons.xcodeproj` to **Libraries** and add `libRNVectorIcons.a` to **Link Binary With Libraries** under **Build Phases**. [More info and screenshots about how to do this is available in the React Native documentation](http://facebook.github.io/react-native/docs/linking-libraries.html).\n\n## Usage\nYou can either use one of the bundled icons or roll your own custom font. Currently available options for bundled icon sets are:\n\n* [`Entypo`](http://entypo.com) by Daniel Bruce (**411** icons) \n* [`EvilIcons`](http://evil-icons.io) by Alexander Madyankin & Roman Shamin (v1.7.6, **68** icons) \n* [`FontAwesome`](http://fortawesome.github.io/Font-Awesome/icons/) by Dave Gandy (v4.3, **519** icons) \n* [`Foundation`](http://zurb.com/playground/foundation-icon-fonts-3) by ZURB, Inc. (v3.0, **283** icons)\n* [`Ionicons`](http://ionicons.com/) by Ben Sperry (v2.0.1, **733** icons)\n* [`MaterialIcons`](https://www.google.com/design/icons/) by Google, Inc. (v2.0, **796** icons)\n* [`Zocial`](http://zocial.smcllns.com/) by Sam Collins (v1.0, **100** icons)\n\n```js\nvar Icon = require('react-native-vector-icons/FontAwesome');\nvar myIcon = (<Icon name=\"rocket\" size={30} color=\"#900\" style={styles.icon} />)\n```\n\n### Sizing\n\nEither use the `size` attribute or a style with `fontSize`, defaults to 12. Sets the height of the icon, width depends on the icon aspect ratio, but will most likely be the same. \n\n### Color\nEither use the `color` attribute or a style with `color`, defaults to black. \n\n### Style\nMost [style properties](http://facebook.github.io/react-native/docs/style.html) will work as expected, you might find it useful to play around with these:\n\n* `backgroundColor`\n* `borderWidth`\n* `borderColor`\n* `borderRadius`\n* `padding`\n* `margin`\n* `color`\n* `fontSize`\n* `flexDirection`\n* `justifyContent`\n* `alignItems`\n\nBy combining some of these you can create for example: \n\n![type](https://cloud.githubusercontent.com/assets/378279/7667570/33817554-fc0d-11e4-9ad7-4eb60139cfb7.png)\n![star](https://cloud.githubusercontent.com/assets/378279/7667569/3010dd7e-fc0d-11e4-9696-cb721fe8e98d.png)\n\n### Nesting\nIt's possible to nest the icons, any child content will appear after the icon, see the button example below. \n\n### Usage as PNG image/source object\n\nConvenient way to plug this in into other components that rely on bitmap images rather than scalable vector icons. Takes the arguments `name`, `size` and `color` as described above.\n\n```\nIcon.getImageSource('user', 20, 'red').then((source) => this.setState({ userIcon: source }));\n```\n\nFor a complete example check out the `TabBarExample` project.\n\n### Usage with [TabBarIOS](http://facebook.github.io/react-native/docs/tabbarios.html)\n\nSimply use `Icon.TabBarItem` instead of `TabBarIOS.Item`. This is an extended component that works exactly the same but with three additional properties: \n\n* `iconName` name of the default icon (similar to `TabBarIOS.Item` `icon`).\n* `selectedIconName` name of the default icon (similar to `TabBarIOS.Item` `selectedIcon`). Optional.\n* `iconSize` size of the icon, defaults to 30. Optional.\n\nFor example usage see `Examples/TabBarExample` or the examples section below. Don't forget to import and link to this project as described above if you are going to use the TabBar integration. \n\n### Usage with [NavBarIOS](http://facebook.github.io/react-native/docs/navigatorios.html)\n\nUse `Icon.getImageSource` to get an image source object and pass it as you would with `backButtonIcon`, `leftButtonIcon` or `rightButtonIcon`. \n\nNote: Since [`NavBarIOS` doesn't rerender with new state](https://github.com/facebook/react-native/issues/1403) and the async nature of `getImageSource` it's not possible to use it in `initialRoute`, but any view added by `push` should be fine.  \n\n### Custom Fonts\n\n#### `createIconSet(glyphMap, fontFamily)`\nReturns your own custom font based on the `glyphMap` where the key is the icon name and the value is either a UTF-8 character or it's character code. `fontFamily` is the name of the font **NOT** the filename. Open the font in Font Book.app or similar to learn the name.\n\n```js\nvar { createIconSet } = require('react-native-vector-icons');\nvar glyphMap = { 'icon-name': 1234, test: 'âˆ†' };\nvar Icon = createIconSet(glyphMap, 'FontName');\n```\n\n#### `createIconSetFromFontello(config[, fontFamily])`\nConvenience method to create a custom font based on a [fontello](http://fontello.com) config file. Don't forget to import the font as described above and drop the `config.json` somewhere convenient in your project. \n\n```js\nvar { createIconSetFromFontello } = require('react-native-vector-icons');\nvar fontelloConfig = require('./config.json');\nvar Icon = createIconSetFromFontello(fontelloConfig);\n```\n\n## Examples\n\n### IconExplorer\nTry the `IconExplorer` project in `Examples/IconExplorer` folder, there you can also search for any icon. \n\n![Screenshot of IconExplorer](https://cloud.githubusercontent.com/assets/378279/8094980/d4b969ce-0fca-11e5-9b0b-520e7ed1740b.png)\n\n\n### Basic Example\n```js\nvar React = require('react-native');\nvar Icon = require('react-native-vector-icons/Ionicons');\n\nvar ExampleView = React.createClass({\n  render: function() {\n    return <Icon name=\"person\" size={30} color=\"#4F8EF7\" />;\n  }\n};\n```\n\n### TabBar\nFull example in `TabBarExample` project in `Examples/TabBarExample` folder. \n\n```js\nvar React = require('react-native');\nvar {\n  View, \n  Text, \n  TabBarIOS,\n} = React;\nvar Icon = require('react-native-vector-icons/Ionicons');\n\nvar TabBarView = React.createClass({\n  render: function() {\n    return (\n      <TabBarIOS>\n        <Icon.TabBarItem\n          title=\"Home\"\n          iconName=\"ios-home-outline\"\n          selectedIconName=\"ios-home\"\n          }}>\n          <View style={styles.tabContent}><Text>Home Tab</Text></View>\n        </Icon.TabBarItem>\n      </TabBarIOS>\n    );\n  }\n};\n```\n\n### Button\nBy nesting a `<Text>` element and assigning padding and background color you can achieve a button like appearance. To register taps, just wrap it with a [`Touchable*`](http://facebook.github.io/react-native/docs/touchableopacity.html) component. \n\n![buttons](https://cloud.githubusercontent.com/assets/378279/7667568/2e9021b2-fc0d-11e4-8e68-cf91c329a6f4.png)\n\n```js\nvar Icon = require('react-native-vector-icons/FontAwesome')\n\nvar styles = StyleSheet.create({\n  icon: {\n    fontSize: 20,\n    color: 'white',\n    paddingVertical: 5,\n    paddingHorizontal: 8,\n    borderRadius: 4,\n    backgroundColor: '#3b5998',\n  },\n  text: {\n    marginLeft: 10,\n    color: 'white',\n    fontWeight: '600',\n  },\n});\nvar button = (\n  <Icon name=\"facebook\" style={styles.icon}>\n    <Text style={styles.text}>Login with Facebook</Text>\n  </Icon>\n);\n```\n\n## Generating your own icon set from a CSS file\n\nIf you already have a icon font with associated CSS file then you can easily generate a icon set with the `generate-icon` script. \n\n### Example usage: \n\n```\n./node_modules/.bin/generate-icon path/to/styles.css --componentName=MyIcon --fontFamily=myicon > Components/MyIcon.js\n```\n\n### Options\n\nAny flags not listed below, like `--componentName` and `--fontFamily`, will be passed on to the template. \n\n#### `-p`, `--prefix`\nCSS selector prefix [default: \".icon-\"]\n\n#### `-t`, `--template`\nTemplate in lodash format [default: \"./template/iconSet.tpl\"]\n\nFor default template please provide `--componentName` and `--fontFamily`.\n\n#### `-o`, `--output`\nSave output to file, defaults to STDOUT\n\n## License\n\nThis project is licenced under the [MIT License](http://opensource.org/licenses/mit-license.html).\n\nAny bundled fonts are copyright to their respective authors and mostly under MIT or [SIL OFL](http://scripts.sil.org/OFL).\n",
  "readmeFilename": "README.md",
  "_id": "react-native-vector-icons@0.6.3",
  "_shasum": "be58c87600586e8bd9dfcb2842ec8274cb9328a5",
  "_from": "react-native-vector-icons@",
  "_resolved": "https://registry.npmjs.org/react-native-vector-icons/-/react-native-vector-icons-0.6.3.tgz"
}
